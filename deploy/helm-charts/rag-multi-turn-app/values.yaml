# Default values for rag-llm-pipeline

imagePullSecret:
  # Leave blank, if no imagePullSecret is needed.
  registry: "nvcr.io"
  name: "ngc-secret"
  # If set to false, the chart expects either a imagePullSecret
  # with the name configured above to be present on the cluster or that no
  # credentials are needed.
  create: false
  username: '$oauthtoken'
  password: ""

query:
  image: nvcr.io/ohlfw0olaadg/ea-rag-examples/chain-server:multi-turn-rag-0.4.0-rc1
  replicas: 1
  resources:
    limits:
      nvidia.com/gpu: 1  # Number of GPUs to present to the running service
  nodeSelector: {}
  tolerations: {}
  affinity: {}
  env:
      APP_VECTORSTORE_URL: "pgvector:5432"
      APP_VECTORSTORE_NAME: "pgvector"
      APP_LLM_SERVERURL: "nemollm-inference:8005" # openai_port of inference service
      APP_LLM_MODELNAME: llama-2-13b-chat
      APP_LLM_MODELENGINE: nemo-infer-openai
      APP_EMBEDDINGS_SERVERURL: "nemollm-embedding:8080"
      APP_EMBEDDINGS_MODELNAME: NV-Embed-QA
      APP_EMBEDDINGS_MODELENGINE: nemo-embed-langchain
      APP_CONFIG_FILE: /dev/null
      NVAPI_KEY: ""
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: api
  service:
      type: ClusterIP
      targetPort: 8081
      ports:
        - port: 8081
          targetPort: http
          protocol: TCP
          name: http

frontend:
  image: nvcr.io/ohlfw0olaadg/ea-rag-examples/rag-playground:0.4.0-rc1
  replicas: 1
  nodeSelector: {}
  tolerations: {}
  affinity: {}
  env:
    - name: APP_MODELNAME
      value: "llama-2-13b-chat"
    - name: APP_SERVERPORT
      value: "8081"
    - name: APP_SERVERURL
      value: http://query-router
    - name: RIVA_API_URI
      value: ""
    - name: RIVA_API_KEY
      value: ""
    - name: RIVA_FUNCTION_ID
      value: ""
    - name: TTS_SAMPLE_RATE
      value: 48000
  service:
      type: NodePort
      targetPort: 8090
      ports:
        - port: 8090
          targetPort: http
          protocol: TCP
          name: http

pgvector:
  image: ankane/pgvector:v0.5.1
  replicas: 1
  resources: {}
  nodeSelector: {}
  tolerations: {}
  affinity: {}
  env:
    - name: POSTGRES_DB
      value: api
    - name: POSTGRES_PASSWORD
      value: password
    - name: POSTGRES_USER
      value: postgres
    - name: PGDATA
      value: /var/lib/postgresql/data/pgdata
  service:
      type: ClusterIP
      targetPort: 5432
      ports:
        - port: 5432
          targetPort: http
          protocol: TCP
          name: http

  # persist data to a persistent volume
  persistence:
    enabled: true
    existingClaim: ""
    # Persistent Volume Storage Class
    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning.
    # If undefined (the default) or set to null, no storageClassName spec is
    #   set, choosing the default provisioner.
    storageClass: ""
    accessMode: ReadWriteOnce  # If using an NFS or similar setup, you can use ReadWriteMany
    size: 50Gi  # size of claim in bytes (e.g. 8Gi)
    annotations: {}
  hostPath:
    enabled: false
    path: /pgvector-data-store  # Only required if hostPath is enabled -- path to the pgvector data-store
