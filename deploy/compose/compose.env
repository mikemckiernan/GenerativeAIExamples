# full path to the local copy of the model weights
# NOTE: This should be an absolute path and not relative path
export MODEL_DIRECTORY="/home/nvidia/llama2_13b_chat_hf_v1/"

# Fill this out if you dont have a GPU. Leave this empty if you have a local GPU
export AI_PLAYGROUND_API_KEY="nvapi-*"

# flag to enable activation aware quantization for the LLM
# export QUANTIZATION="int4_awq"

# the architecture of the model. eg: llama
export MODEL_ARCHITECTURE="llama"

# the name of the model being used - only for displaying on frontend
export MODEL_NAME="Llama-2-13b-chat-hf"

# the name of the RAG example being used
export RAG_EXAMPLE="developer_rag"

# [OPTIONAL] the maximum number of input tokens
# export MODEL_MAX_INPUT_LENGTH=3000

# [OPTIONAL] the maximum number of output tokens
# export MODEL_MAX_OUTPUT_LENGTH=512

# [OPTIONAL] the number of GPUs to make available to the inference server
# export INFERENCE_GPU_COUNT="all"

# [OPTIONAL] the base directory inside which all persistent volumes will be created
# export DOCKER_VOLUME_DIRECTORY="."

# [OPTIONAL] the config file for chain server w.r.t. pwd
export APP_CONFIG_FILE=/dev/null

# parameters for PGVector, update this when using PGVector Vecotor store
# export POSTGRES_PASSWORD=password
# export POSTGRES_USER=postgres
# export POSTGRES_DB=api

### Riva Parameters:

# Riva Speech API URI: Riva Server IP address/hostname and port
export RIVA_SPEECH_API_URI=""

# If you plan to use NVCF (NVIDIA Cloud Functions) to host your Riva 
# server, ensure that the following three variables are populated 

# NVCF Riva Speech API URI 
# export NVCF_RIVA_SPEECH_API_URI=""

# NVCF Run Key
# Obtain this by navigating to the Cloud Functions tab at 
# nvcf.stg.ngc.nvidia.com and clicking on the "Generate Run Key" button
# export NVCF_RUN_KEY=""

# NVCF Riva Function ID 
# Obtain this from the Cloud Functions tab at nvcf.stg.ngc.nvidia.com 
# export NVCF_RIVA_FUNCTION_ID=""

# ASR language code(s)
# As of Riva 2.13.1, the supported language codes are: 
# ar-AR, en-US, en-GB, de-DE, es-ES, es-US, fr-FR, hi-IN, it-IT, ja-JP, ru-RU, ko-KR, pt-BR, zh-CN, es-en-US, ja-en-JP
# Enter your choice(s) from among these in the format `export ASR_LANGUAGE_CODE_X`, 
# where X is a non-negative integer, below 
# For example, if you wish to enable ASR for a second language which is running 
# on your Riva server, set `export ASR_LANGUAGE_CODE_X="<language-code>"`
export ASR_LANGUAGE_CODE_0="en-US"

# ASR acoustic model architecture
# Supported values are: conformer, conformer_xl (en-US + amd64 only), citrinet_1024, citrinet_256 (en-US + arm64 only), jasper (en-US + amd64 only), quartznet (en-US + amd64 only)
export ASR_ACOUSTIC_MODEL="conformer"

# TTS language code
# As of Riva 2.13.1, the supported language codes are: 
# en-US, es-ES, it-IT, de-DE, zh-CN
# Enter your choice(s) from among these in the format `export TTS_LANGUAGE_CODE_X`, 
# where X is a non-negative integer, below 
# For example, if you wish to enable TTS for a second language which is running 
# on your Riva server, set `export TTS_LANGUAGE_CODE_X="<language-code>"`
export TTS_LANGUAGE_CODE_0="en-US"

# TTS sample rate (Hz)
export TTS_SAMPLE_RATE=48000