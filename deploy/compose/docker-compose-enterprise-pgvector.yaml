services:

  llm:
    container_name: nemollm-inference-ms
    image: nvcr.io/ohlfw0olaadg/ea-participants/nemollm-inference-ms:23.12
    volumes:
    - ${MODEL_DIRECTORY:?please update the env file and source it before running}:/model-store
    command: nemollm_inference_ms --model ${MODEL_NAME:?please update the env file and source it before running} --openai_port 9999 --nemo_port 9998 --num_gpus=1
    ports:
    - "8000:8000"
    - "9998:9998"
    - "9999:9999"
    expose:
    - "8000"
    - "9998"
    - "9999"
    shm_size: 20gb
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: ${INFERENCE_GPU_COUNT:-all}
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10m

  embeddings:
    container_name: nemo-retriever-embedding-ms
    image: nvcr.io/ohlfw0olaadg/ea-participants/nemo-retriever-embedding-microservice:23.12
    volumes:
    - ${EMBEDDING_MODEL_DIRECTORY:?please update the env file and source it before running}:/model-store
    command: bin/web -m /model-store -p 9080
    ports:
    - "9080:9080"
    expose:
    - "9080"
    shm_size: 8gb
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: ${INFERENCE_GPU_COUNT:-all}
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9080/v1/health/ready"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10m

  pgvector:
    container_name: pgvector
    image: ankane/pgvector:v0.5.1
    ports:
    - 5432:5432
    expose:
    - "5432"
    volumes:
    - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/data:/var/lib/postgresql/data
    environment:
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    - POSTGRES_USER=${POSTGRES_USER:-postgres}
    - POSTGRES_DB=${POSTGRES_DB:-api}

  query:
    container_name: chain-server
    image: nvcr.io/ohlfw0olaadg/ea-rag-examples/enterprise-rag:0.3.0-chain-server
    build:
      context: ../../
      dockerfile: ./RetrievalAugmentedGeneration/Dockerfile
    command: --port 8081 --host 0.0.0.0
    environment:
      APP_VECTORSTORE_URL: "pgvector:5432"
      APP_VECTORSTORE_NAME: "pgvector"
      APP_LLM_SERVERURL: "llm:9999"
      APP_LLM_MODELNAME: ${MODEL_NAME:?please update the env file and source it before running}
      APP_LLM_MODELENGINE: nemo-infer
      APP_EMBEDDINGS_SERVERURL: "embeddings:9080"
      APP_EMBEDDINGS_MODELNAME: ${EMBEDDING_MODEL_NAME:?please update the env file and source it before running}
      APP_EMBEDDINGS_MODELENGINE: nemo-embed
      APP_CONFIG_FILE: ${APP_CONFIG_FILE}
      NVAPI_KEY: ${AI_PLAYGROUND_API_KEY}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-api}
    volumes:
      - ${APP_CONFIG_FILE}:${APP_CONFIG_FILE}
    ports:
    - "8081:8081"
    expose:
    - "8081"
    shm_size: 5gb
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - "pgvector"
      - "llm"
      - "embeddings"

  frontend:
    container_name: llm-playground
    image: nvcr.io/ohlfw0olaadg/ea-rag-examples/enterprise-rag:0.3.0-llm-playground
    build:
      context: ../../RetrievalAugmentedGeneration/
      dockerfile: ./frontend/Dockerfile
    command: --port 8090
    environment:
      APP_SERVERURL: http://query
      APP_SERVERPORT: 8081
      APP_MODELNAME: ${MODEL_NAME:?please update the env file and source it before running}
    ports:
    - "8090:8090"
    expose:
    - "8090"
    depends_on:
      - query

  jupyter-server:
    container_name: notebook-server
    image: notebook-server:latest
    build:
      context: ../../
      dockerfile: ./notebooks/Dockerfile.notebooks
    ports:
    - "8888:8888"
    expose:
    - "8888"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - "llm"
      - "embeddings"

networks:
  default:
    name: nvidia-llm
